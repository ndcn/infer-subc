{
    "intensity_normalization": {
        "name": "Intensity Normalization",
        "python::module": "aicssegmentation.core.pre_processing_utils",
        "python::function": "intensity_normalization",
        "parameters": {
            "scaling_param": [
                {
                    "widget_type": "slider",
                    "data_type": "float",
                    "min": -10,
                    "max": 30,
                    "increment": 0.005
                },
                {
                    "widget_type": "slider",
                    "data_type": "float",
                    "min": -10,
                    "max": 200,
                    "increment": 0.005
                }
            ]
        }
    },
    "intensity_normalization_with_bound": {
        "name": "Intensity Normalization with bound",
        "python::module": "aicssegmentation.core.pre_processing_utils",
        "python::function": "intensity_normalization",
        "parameters": {
            "scaling_param": [
                {
                    "widget_type": "slider",
                    "data_type": "float",
                    "min": -10,
                    "max": 30,
                    "increment": 0.005
                },
                {
                    "widget_type": "slider",
                    "data_type": "float",
                    "min": -10,
                    "max": 200,
                    "increment": 0.005
                },
                {
                    "widget_type": "slider",
                    "data_type": "int",
                    "min": 20,
                    "max": 1000,
                    "increment": 20
                },
                {
                    "widget_type": "slider",
                    "data_type": "int",
                    "min": 50,
                    "max": 8000,
                    "increment": 50
                }
            ]
        }
    },
    "intensity_normalization_min_max_with_bound": {
        "name": "Intensity Normalization using min-max with bound",
        "python::module": "aicssegmentation.core.pre_processing_utils",
        "python::function": "intensity_normalization",
        "parameters": {
            "scaling_param": [
                {
                    "widget_type": "slider",
                    "data_type": "int",
                    "min": 50,
                    "max": 10000,
                    "increment": 50
                }
            ]
        }
    },
    "edge_preserving_smoothing": {
        "name": "Edge Preserving Smoothing",
        "python::module": "aicssegmentation.core.pre_processing_utils",
        "python::function": "edge_preserving_smoothing_3d",
        "parameters": null
    },
    "filament_filter_slice_by_slice": {
        "name": "Filament Filter Slice by Slice",
        "python::module": "aicssegmentation.core.vessel",
        "python::function": "vesselnessSliceBySlice",
        "parameters": {
            "sigmas": [
                {
                    "widget_type": "slider",
                    "data_type": "float",
                    "min": 0.5,
                    "max": 5,
                    "increment": 0.5
                }
            ],
            "cutoff": {
                "widget_type": "slider",
                "data_type": "float",
                "min": 0.005,
                "max": 0.5,
                "increment": 0.005
            }
        }
    },
    "size_filter": {
        "name": "Size Filter",
        "python::module": "aicssegmentation.core.utils",
        "python::function": "size_filter",
        "parameters": {
            "min_size": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 500,
                "increment": 1
            },
            "method": {
                "widget_type": "drop-down",
                "data_type": "str",
                "options": [
                    "3D",
                    "slice_by_slice"
                ]
            }
        }
    },
    "filament_filter_3D": {
        "name": "Filament Filter 3D",
        "python::module": "aicssegmentation.core.vessel",
        "python::function": "vesselness3D",
        "parameters": {
            "sigmas": {
                "widget_type": "slider",
                "data_type": "float",
                "min": 0,
                "max": 5,
                "increment": 0.05
            },
            "cutoff": {
                "widget_type": "slider",
                "data_type": "float",
                "min": 0.005,
                "max": 0.5,
                "increment": 0.005
            }
        }
    },
    "gaussian_smoothing_slice_by_slice": {
        "name": "Gaussian Smoothing Slice by Slice",
        "python::module": "aicssegmentation.core.pre_processing_utils",
        "python::function": "image_smoothing_gaussian_slice_by_slice",
        "parameters": {
            "sigma": {
                "widget_type": "slider",
                "data_type": "float",
                "min": 0.5,
                "max": 10,
                "increment": 0.5
            }
        }
    },
    "spot_filter_3D": {
        "name": "Spot Filter 3D",
        "python::module": "aicssegmentation.core.seg_dot",
        "python::function": "dot_3d",
        "parameters": {
            "log_sigma": {
                "widget_type": "slider",
                "data_type": "float",
                "min": 0,
                "max": 10,
                "increment": 0.05
            },
            "cutoff": {
                "widget_type": "slider",
                "data_type": "float",
                "min": 0,
                "max": 0.5,
                "increment": 0.001
            }
        }
    },
    "gaussian_smoothing_3D": {
        "name": "Gaussian Smoothing 3D",
        "python::module": "aicssegmentation.core.pre_processing_utils",
        "python::function": "image_smoothing_gaussian_3d",
        "parameters": {
            "sigma": {
                "widget_type": "slider",
                "data_type": "float",
                "min": 0,
                "max": 10,
                "increment": 0.5
            }
        }
    },
    "spot_filter_slice_by_slice": {
        "name": "Spot Filter Slice by Slice",
        "python::module": "aicssegmentation.core.seg_dot",
        "python::function": "dot_slice_by_slice",
        "parameters": {
            "log_sigma": {
                "widget_type": "slider",
                "data_type": "float",
                "min": 0,
                "max": 10,
                "increment": 0.05
            },
            "cutoff": {
                "widget_type": "slider",
                "data_type": "float",
                "min": 0,
                "max": 1,
                "increment": 0.001
            }
        }
    },
    "hole_filling": {
        "name": "Hole Filling",
        "python::module": "aicssegmentation.core.utils",
        "python::function": "hole_filling",
        "parameters": {
            "hole_min": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 50,
                "increment": 1
            },
            "hole_max": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 10000,
                "increment": 1
            },
            "fill_2d": {
                "widget_type": "drop-down",
                "data_type": "bool",
                "options": [
                    true,
                    false
                ]
            }
        }
    },
    "find_local_maxima": {
        "name": "Find Local Maxima",
        "python::module": "aicssegmentation.core.utils",
        "python::function": "peak_local_max_wrapper",
        "parameters": null
    },
    "watershed_for_cutting": {
        "name": "Watershed for cutting",
        "python::module": "aicssegmentation.core.utils",
        "python::function": "watershed_wrapper",
        "parameters": null
    },
    "watershed_for_segmentation": {
        "name": "Watershed for segmentation",
        "python::module": "skimage.segmentation",
        "python::function": "watershed",
        "parameters": {
            "watershed_line": {
                "widget_type": "drop-down",
                "data_type": "bool",
                "options": [
                    true,
                    false
                ]
            }
        }
    },
    "prune_z_slices": {
        "name": "Prune Z-Slices",
        "python::module": "aicssegmentation.core.utils",
        "python::function": "prune_z_slices",
        "parameters": null
    },
    "topology_preserving_thinning": {
        "name": "Topology Preserving Thinning",
        "python::module": "aicssegmentation.core.utils",
        "python::function": "topology_preserving_thinning",
        "parameters": {
            "min_thickness": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 1,
                "max": 10,
                "increment": 1
            },
            "thin": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 1,
                "max": 200,
                "increment": 1
            }
        }
    },
    "masked_object_treshold_high_level": {
        "name": "Masked Object Threshold - Part 2: high level",
        "python::module": "aicssegmentation.core.MO_threshold",
        "python::function": "MO_high_level",
        "parameters": {
            "extra_criteria": {
                "widget_type": "drop-down",
                "data_type": "bool",
                "options": [
                    true,
                    false
                ]
            },
            "local_adjust": {
                "data_type": "float",
                "widget_type": "slider",
                "min": 0,
                "max": 2,
                "increment": 0.02
            }
        }
    },
    "masked_object_treshold_low_level": {
        "name": "Masked Object Threshold - Part 1: low level",
        "python::module": "aicssegmentation.core.MO_threshold",
        "python::function": "MO_low_level",
        "parameters": {
            "global_thresh_method": {
                "data_type": "str",
                "widget_type": "drop-down",
                "options": [
                    "triangle",
                    "median",
                    "ave_tri_med"
                ]
            },
            "object_minArea": {
                "data_type": "int",
                "widget_type": "slider",
                "min": 0,
                "max": 2000,
                "increment": 50
            },
            "dilate": {
                "widget_type": "drop-down",
                "data_type": "bool",
                "options": [
                    true,
                    false
                ]
            }
        }
    },
    "masked_object_treshold_combined": {
        "name": "Masked Object Threshold - Combined",
        "python::module": "aicssegmentation.core.MO_threshold",
        "python::function": "MO",
        "parameters": {
            "global_thresh_method": {
                "data_type": "str",
                "widget_type": "drop-down",
                "options": [
                    "triangle",
                    "median",
                    "ave_tri_med"
                ]
            },
            "object_minArea": {
                "data_type": "int",
                "widget_type": "slider",
                "min": 0,
                "max": 2000,
                "increment": 50
            },
            "extra_criteria": {
                "widget_type": "drop-down",
                "data_type": "bool",
                "options": [
                    true,
                    false
                ]
            },
            "local_adjust": {
                "data_type": "float",
                "widget_type": "slider",
                "min": 0,
                "max": 2,
                "increment": 0.02
            },
            "return_object": {
                "widget_type": "drop-down",
                "data_type": "bool",
                "options": [
                    true,
                    false
                ]
            },
            "dilate": {
                "widget_type": "drop-down",
                "data_type": "bool",
                "options": [
                    true,
                    false
                ]
            }
        }
    },
    "invert_image": {
        "name": "Invert Image",
        "python::module": "aicssegmentation.core.utils",
        "python::function": "invert_mask",
        "parameters": null
    },
    "mask_image": {
        "name": "Mask Image",
        "python::module": "aicssegmentation.core.utils",
        "python::function": "mask_image",
        "parameters": {
            "value": {
                "data_type": "int",
                "widget_type": "slider",
                "min": 0,
                "max": 255,
                "increment": 1
            }
        }
    },
    "merge_segmentation": {
        "name": "Merge Segmentation",
        "python::module": "aicssegmentation.core.utils",
        "python::function": "segmentation_union",
        "parameters": null
    },
    "segmentation_xor": {
        "name": "Segmentation XOR",
        "python::module": "aicssegmentation.core.utils",
        "python::function": "segmentation_xor",
        "parameters": null
    },
    "generate_seeding_image": {
        "name": "Generate seeding image",
        "python::module": "aicssegmentation.core.utils",
        "python::function": "get_seed_for_objects",
        "parameters": {
            "area_min": {
                "data_type": "int",
                "widget_type": "slider",
                "min": 0,
                "max": 1000,
                "increment": 100
            },
            "area_max": {
                "data_type": "int",
                "widget_type": "slider",
                "min": 0,
                "max": 50000,
                "increment": 100
            },
            "bg_seed": {
                "widget_type": "drop-down",
                "data_type": "bool",
                "options": [
                    true,
                    false
                ]
            }
        }
    },
    "remove_index_object": {
        "name": "Remove Index Object",
        "python::module": "aicssegmentation.core.utils",
        "python::function": "remove_index_object",
        "parameters": null
    },
    "extract_boundary_of_objects": {
        "name": "Extract Boundary of Objects",
        "python::module": "skimage.segmentation",
        "python::function": "find_boundaries",
        "parameters": {
            "connectivity": {
                "data_type": "int",
                "widget_type": "drop-down",
                "options": [
                    1,
                    2,
                    3
                ]
            },
            "mode": {
                "data_type": "str",
                "widget_type": "drop-down",
                "options": [
                    "thick",
                    "inner",
                    "outer"
                ]
            }
        }
    },
    "erosion": {
        "name": "Erosion",
        "python::module": "skimage.morphology",
        "python::function": "erosion",
        "parameters": null
    },
    "compute_3d_hessian_matrix": {
        "name": "Compute 3D Hessian Matrix",
        "python::module": "aicssegmentation.core.hessian",
        "python::function": "compute_3d_hessian_matrix",
        "parameters": {
            "sigma": {
                "widget_type": "slider",
                "data_type": "float",
                "min": 0,
                "max": 10,
                "increment": 0.5
            },
            "scale": {
                "widget_type": "drop-down",
                "data_type": "bool",
                "options": [
                    true,
                    false
                ]
            },
            "whiteonblack": {
                "widget_type": "drop-down",
                "data_type": "bool",
                "options": [
                    true,
                    false
                ]
            }
        }
    },
    "absolute_3d_hessian_eigenvalues": {
        "name": "Absolute 3d hessian eigenvalues",
        "python::module": "aicssegmentation.core.hessian",
        "python::function": "absolute_3d_hessian_eigenvalues",
        "parameters": {
            "sigma": {
                "widget_type": "slider",
                "data_type": "float",
                "min": 0,
                "max": 10,
                "increment": 0.5
            },
            "scale": {
                "widget_type": "drop-down",
                "data_type": "bool",
                "options": [
                    true,
                    false
                ]
            },
            "whiteonblack": {
                "widget_type": "drop-down",
                "data_type": "bool",
                "options": [
                    true,
                    false
                ]
            }
        }
    },
    "remove_hot_pixel": {
        "name": "Remove Hot Pixel",
        "python::module": "aicssegmentation.core.utils",
        "python::function": "remove_hot_pixel",
        "parameters": {}
    },
    "label": {
        "name": "label objects",
        "python::module": "skimage.measure",
        "python::function": "label",
        "parameters": null
    },
    "fixed_infer_lyso": {
        "name": "infer lyso  (fixed parameters)",
        "python::module": "infer_subc_2d.organelles.lysosome",
        "python::function": "fixed_infer_lyso",
        "parameters": null
    },
    "infer_lyso": {
        "name": "infer lyso",
        "python::module": "infer_subc_2d.organelles.lysosome",
        "python::function": "infer_lyso",
        "parameters": {
            "median_sz": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 15,
                "increment": 1
            },
            "gauss_sig": {
                "data_type": "float",
                "increment": 0.25,
                "max": 15.0,
                "min": 1.25,
                "widget_type": "slider"
            },
            "dot_scale_1": {
                "data_type": "float",
                "increment": 0.05,
                "max": 10,
                "min": 0,
                "widget_type": "slider"
            },
            "dot_cut_1": {
                "data_type": "float",
                "increment": 0.001,
                "max": 0.5,
                "min": 0,
                "widget_type": "slider"
            },
            "dot_scale_2": {
                "data_type": "float",
                "increment": 0.05,
                "max": 10,
                "min": 0,
                "widget_type": "slider"
            },
            "dot_cut_2": {
                "data_type": "float",
                "increment": 0.001,
                "max": 0.5,
                "min": 0,
                "widget_type": "slider"
            },
            "dot_scale_3": {
                "data_type": "float",
                "increment": 0.05,
                "max": 10,
                "min": 0,
                "widget_type": "slider"
            },
            "dot_cut_3": {
                "data_type": "float",
                "increment": 0.001,
                "max": 0.5,
                "min": 0,
                "widget_type": "slider"
            },
            "filament_scale": {
                "data_type": "float",
                "increment": 0.05,
                "max": 10,
                "min": 0,
                "widget_type": "slider"
            },
            "filament_cut": {
                "data_type": "float",
                "increment": 0.001,
                "max": 0.5,
                "min": 0,
                "widget_type": "slider"
            },
            "min_hole_w": {
                "data_type": "int",
                "increment": 1,
                "max": 30,
                "min": 0,
                "widget_type": "slider"
            },
            "max_hole_w": {
                "data_type": "int",
                "increment": 1,
                "max": 40,
                "min": 4,
                "widget_type": "slider"
            },
            "small_obj_w": {
                "data_type": "int",
                "increment": 1,
                "max": 50,
                "min": 1,
                "widget_type": "slider"
            }
        }
    },
    "lyso_spot_filter": {
        "name": "lyso spot filter (fixed)",
        "python::module": "infer_subc_2d.organelles.lysosome",
        "python::function": "lyso_spot_filter",
        "parameters": null
    },
    "lyso_filiment_filter": {
        "name": "lysosome filiment filter",
        "python::module": "infer_subc_2d.organelles",
        "python::function": "lyso_filiment_filter",
        "parameters": null
    },
    "logical_or": {
        "name": "logical or",
        "python::module": "numpy",
        "python::function": "logical_or",
        "parameters": null
    },
    "fixed_infer_nuclei": {
        "name": "infer nuclei  (fixed)",
        "python::module": "infer_subc_2d.organelles.nuclei",
        "python::function": "fixed_infer_nuclei",
        "parameters": null
    },
    "infer_nuclei_fromlabel": {
        "name": "infer nuclei",
        "python::module": "infer_subc_2d.organelles.nuclei",
        "python::function": "infer_nuclei_fromlabel",
        "parameters": {
            "nuc_ch": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 10,
                "increment": 1
            },
            "median_sz": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 3,
                "max": 15,
                "increment": 1
            },
            "gauss_sig": {
                "data_type": "float",
                "increment": 0.25,
                "max": 15.0,
                "min": 1.25,
                "widget_type": "slider"
            },
            "thresh_factor": {
                "data_type": "float",
                "increment": 0.05,
                "max": 1.2,
                "min": 0.6,
                "widget_type": "slider"
            },
            "thresh_min": {
                "data_type": "float",
                "increment": 0.05,
                "max": 0.9,
                "min": 0.0,
                "widget_type": "slider"
            },
            "thresh_max": {
                "data_type": "float",
                "increment": 0.05,
                "max": 1.0,
                "min": 0.1,
                "widget_type": "slider"
            },
            "max_hole_w": {
                "data_type": "int",
                "increment": 1,
                "max": 40,
                "min": 4,
                "widget_type": "slider"
            },
            "small_obj_w": {
                "data_type": "int",
                "increment": 1,
                "max": 50,
                "min": 1,
                "widget_type": "slider"
            }
        }
    },
    "median_filter_slice_by_slice": {
        "name": "Median Smoothing Slice by Slice",
        "python::module": "infer_subc_2d.core.img",
        "python::function": "median_filter_slice_by_slice",
        "parameters": {
            "size": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 1,
                "max": 20,
                "increment": 1
            }
        }
    },
    "apply_log_li_threshold": {
        "name": "threshold log Li",
        "python::module": "infer_subc_2d.core.img",
        "python::function": "apply_log_li_threshold",
        "parameters": {
            "thresh_factor": {
                "widget_type": "slider",
                "data_type": "float",
                "min": 0.3,
                "max": 1.1,
                "increment": 0.05
            },
            "thresh_min": {
                "widget_type": "slider",
                "data_type": "float",
                "min": 0.0,
                "max": 0.8,
                "increment": 0.01
            },
            "thresh_max": {
                "widget_type": "slider",
                "data_type": "float",
                "min": 0.3,
                "max": 1.0,
                "increment": 0.05
            }
        }
    },
    "apply_mask": {
        "name": "apply mask",
        "python::module": "infer_subc_2d.core.img",
        "python::function": "apply_mask",
        "parameters": null
    },
    "select_channel_from_raw": {
        "name": "select a channel ",
        "python::module": "infer_subc_2d.core.img",
        "python::function": "select_channel_from_raw",
        "parameters": {
            "chan": {
                "data_type": "int",
                "options": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7
                ],
                "widget_type": "drop-down"
            }
        }
    },
    "scale_and_smooth": {
        "name": "scale and smooth",
        "python::module": "infer_subc_2d.core.img",
        "python::function": "scale_and_smooth",
        "parameters": {
            "median_sz": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 15,
                "increment": 1
            },
            "gauss_sig": {
                "data_type": "float",
                "increment": 0.25,
                "max": 15.0,
                "min": 1.25,
                "widget_type": "slider"
            }
        }
    },
    "fill_and_filter_linear_size": {
        "name": "`hole_filling` and `size_filter` with size argument in linear units ",
        "python::module": "infer_subc_2d.core.img",
        "python::function": "fill_and_filter_linear_size",
        "parameters": {
            "hole_min": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 25,
                "increment": 1
            },
            "hole_max": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 150,
                "increment": 1
            },
            "min_size": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 500,
                "increment": 1
            },
            "method": {
                "data_type": "str",
                "options": [
                    "3D",
                    "slice_by_slice"
                ],
                "widget_type": "drop-down"
            }
        }
    },
    "image_smoothing_gaussian_slice_by_slice": {
        "name": "Gaussian Smoothing Slice by Slice",
        "python::module": "aicssegmentation.core.pre_processing_utils",
        "python::function": "image_smoothing_gaussian_slice_by_slice",
        "parameters": {
            "sigma": {
                "widget_type": "slider",
                "data_type": "float",
                "min": 0.8,
                "max": 20,
                "increment": 0.2
            }
        }
    },
    "size_filter_2D": {
        "name": "Size Filter 2D",
        "python::module": "infer_subc_2d.core.img",
        "python::function": "size_filter_2D",
        "parameters": {
            "min_size": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 500,
                "increment": 1
            }
        }
    },
    "fixed_infer_cellmask_fromaggr": {
        "name": " infer cellmask mask (fixed parameters)",
        "python::module": "infer_subc_2d.organelles.cellmask",
        "python::function": "fixed_infer_cellmask_fromaggr",
        "parameters": null
    },
    "infer_cellmask_fromaggr_MCZ": {
        "name": " infer cellmask (MCZ)",
        "python::module": "infer_subc_2d.organelles.cellmask",
        "python::function": "infer_cellmask_fromaggr_MCZ",
        "parameters": {
            "median_sz": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 15,
                "increment": 1
            },
            "gauss_sig": {
                "data_type": "float",
                "increment": 0.25,
                "max": 15.0,
                "min": 1.25,
                "widget_type": "slider"
            },
            "mo_method": {
                "data_type": "str",
                "widget_type": "drop-down",
                "options": [
                    "triangle",
                    "median",
                    "ave_tri_med"
                ]
            },
            "mo_adjust": {
                "data_type": "float",
                "increment": 0.05,
                "max": 1.0,
                "min": 0.0,
                "widget_type": "slider"
            },
            "mo_cutoff_size": {
                "data_type": "int",
                "increment": 10,
                "max": 250,
                "min": 10,
                "widget_type": "slider"
            },
            "max_hole_w": {
                "data_type": "int",
                "increment": 2,
                "max": 100,
                "min": 20,
                "widget_type": "slider"
            },
            "small_obj_w": {
                "data_type": "int",
                "increment": 1,
                "max": 50,
                "min": 1,
                "widget_type": "slider"
            }
        }
    },
    "raw_soma_MCZ": {
        "name": "define weighted aggregate cellmask signal (MCZ-cellprofiler)",
        "python::module": "infer_subc_2d.organelles",
        "python::function": "raw_soma_MCZ",
        "parameters": null
    },
    "non_linear_soma_transform_MCZ": {
        "name": "non-linear filter of cellmask signal (MCZ-cellprofiler)",
        "python::module": "infer_subc_2d.organelles",
        "python::function": "non_linear_soma_transform_MCZ",
        "parameters": null
    },
    "get_max_label": {
        "name": "get the label with the maximum raw signa",
        "python::module": "infer_subc_2d.core.img",
        "python::function": "get_max_label",
        "parameters": null
    },
    "choose_max_label_soma_union_nucleus": {
        "name": "get cellmask UNION nuclei for largest signal label",
        "python::module": "infer_subc_2d.organelles.cellmask",
        "python::function": "choose_max_label_soma_union_nucleus",
        "parameters": null
    },
    "masked_inverted_watershed": {
        "name": "watershed on inverted image and masked",
        "python::module": "infer_subc_2d.core.img",
        "python::function": "masked_inverted_watershed",
        "parameters": null
    },
    "min_max_intensity_normalization": {
        "name": "Min Max Intesity Normalization",
        "python::module": "infer_subc_2d.core.img",
        "python::function": "min_max_intensity_normalization",
        "parameters": null
    },
    "masked_object_thresh": {
        "name": "Masked Object Threshold wrapper for widgets",
        "python::module": "infer_subc_2d.core.img",
        "python::function": "masked_object_thresh",
        "parameters": {
            "th_method": {
                "data_type": "str",
                "widget_type": "drop-down",
                "options": [
                    "triangle",
                    "median",
                    "ave_tri_med"
                ]
            },
            "cutoff_size": {
                "data_type": "int",
                "widget_type": "slider",
                "min": 0,
                "max": 2000,
                "increment": 50
            },
            "th_adjust": {
                "data_type": "float",
                "widget_type": "slider",
                "min": 0,
                "max": 2,
                "increment": 0.02
            }
        }
    },
    "infer_cytoplasm": {
        "name": "infer infer_cytoplasm",
        "python::module": "infer_subc_2d.organelles.cytoplasm",
        "python::function": "infer_cytoplasm",
        "parameters": {
            "erode_nuclei": {
                "widget_type": "drop-down",
                "data_type": "bool",
                "options": [
                    true,
                    false
                ]
            }
        }
    },
    "soma_aggregate": {
        "name": "weighted sum",
        "python::module": "infer_subc_2d.organelles.cellmask",
        "python::function": "soma_aggregate",
        "parameters": {
            "w0": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 10,
                "increment": 1
            },
            "w1": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 10,
                "increment": 1
            },
            "w2": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 10,
                "increment": 1
            },
            "w3": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 10,
                "increment": 1
            },
            "w4": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 10,
                "increment": 1
            },
            "w5": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 10,
                "increment": 1
            },
            "w6": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 10,
                "increment": 1
            },
            "w7": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 10,
                "increment": 1
            },
            "w8": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 10,
                "increment": 1
            },
            "w9": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 10,
                "increment": 1
            },
            "scale_min_max": {
                "widget_type": "drop-down",
                "data_type": "bool",
                "options": [
                    true,
                    false
                ]
            }
        }
    },
    "raw_cellmask_fromaggr": {
        "name": "define weighted aggregate cellmask signal",
        "python::module": "infer_subc_2d.organelles.cellmask",
        "python::function": "raw_cellmask_fromaggr",
        "parameters": {
            "scale_min_max": {
                "widget_type": "drop-down",
                "data_type": "bool",
                "options": [
                    true,
                    false
                ]
            }
        }
    },
    "non_linear_cellmask_transform_MCZ": {
        "name": "non-linear distortion to fill out cellmask",
        "python::module": "infer_subc_2d.organelles.cellmask",
        "python::function": "non_linear_soma_transform_MCZ",
        "parameters": null
    },
    "choose_max_label_cellmask_union_nucleus": {
        "name": "get cellmask + nuclei for largest signal label",
        "python::module": "infer_subc_2d.organelles.cellmask",
        "python::function": "choose_max_label_cellmask_union_nucleus",
        "parameters": null
    },
    "make_aggregate": {
        "name": "weighted sum wrapper (plugin)",
        "python::module": "infer_subc_2d.core.img",
        "python::function": "make_aggregate",
        "parameters": {
            "w0": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 10,
                "increment": 1
            },
            "w1": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 10,
                "increment": 1
            },
            "w2": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 10,
                "increment": 1
            },
            "w3": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 10,
                "increment": 1
            },
            "w4": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 10,
                "increment": 1
            },
            "w5": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 10,
                "increment": 1
            },
            "w6": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 10,
                "increment": 1
            },
            "w7": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 10,
                "increment": 1
            },
            "w8": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 10,
                "increment": 1
            },
            "w9": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 10,
                "increment": 1
            },
            "scale_min_max": {
                "widget_type": "drop-down",
                "data_type": "bool",
                "options": [
                    true,
                    false
                ]
            }
        }
    },
    "fixed_infer_mito": {
        "name": "infer mitochondria  (fixed parameters)",
        "python::module": "infer_subc_2d.organelles.mitochondria",
        "python::function": "fixed_infer_mito",
        "parameters": null
    },
    "infer_mito": {
        "name": "infer mitochondria",
        "python::module": "infer_subc_2d.organelles.mitochondria",
        "python::function": "infer_mito",
        "parameters": {
            "median_sz": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 3,
                "max": 15,
                "increment": 1
            },
            "gauss_sig": {
                "data_type": "float",
                "increment": 0.25,
                "max": 15.0,
                "min": 1.25,
                "widget_type": "slider"
            },
            "vesselness_scale": {
                "data_type": "float",
                "increment": 0.05,
                "max": 10,
                "min": 0,
                "widget_type": "slider"
            },
            "vesselness_cut": {
                "data_type": "float",
                "increment": 0.001,
                "max": 0.5,
                "min": 0,
                "widget_type": "slider"
            },
            "small_obj_w": {
                "data_type": "int",
                "increment": 1,
                "max": 50,
                "min": 1,
                "widget_type": "slider"
            }
        }
    },
    "vesselness_slice_by_slice": {
        "name": "vesselness filter (e.g. mitochondria)",
        "python::module": "infer_subc_2d.core.img",
        "python::function": "vesselness_slice_by_slice",
        "parameters": {
            "sigma": [
                {
                    "widget_type": "slider",
                    "data_type": "float",
                    "min": 0.5,
                    "max": 5,
                    "increment": 0.5
                }
            ],
            "cutoff": {
                "widget_type": "slider",
                "data_type": "float",
                "min": 0.005,
                "max": 0.5,
                "increment": 0.005
            }
        }
    },
    "size_filter_linear_size": {
        "name": "`size_filter` w/ linear size arg",
        "python::module": "infer_subc_2d.core.img",
        "python::function": "size_filter_linear_size",
        "parameters": {
            "min_size": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 500,
                "increment": 1
            },
            "method": {
                "data_type": "str",
                "options": [
                    "3D",
                    "slice_by_slice"
                ],
                "widget_type": "drop-down"
            },
            "connectivity": {
                "data_type": "int",
                "options": [
                    1,
                    2,
                    3
                ],
                "widget_type": "drop-down"
            }
        }
    },
    "hole_filling_linear_size": {
        "name": "`hole_filling` w/ linear size arg",
        "python::module": "infer_subc_2d.core.img",
        "python::function": "hole_filling_linear_size",
        "parameters": {
            "hole_min": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 25,
                "increment": 1
            },
            "hole_max": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 0,
                "max": 150,
                "increment": 1
            },
            "fill_2d": {
                "widget_type": "drop-down",
                "data_type": "bool",
                "options": [
                    true,
                    false
                ]
            }
        }
    },
    "fixed_infer_golgi": {
        "name": "infer golgi  (fixed parameters)",
        "python::module": "infer_subc_2d.organelles.golgi",
        "python::function": "fixed_infer_golgi",
        "parameters": null
    },
    "infer_golgi": {
        "name": "infer golgi",
        "python::module": "infer_subc_2d.organelles.golgi",
        "python::function": "infer_golgi",
        "parameters": {
            "median_sz": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 3,
                "max": 15,
                "increment": 1
            },
            "gauss_sig": {
                "data_type": "float",
                "increment": 0.25,
                "max": 15.0,
                "min": 1.25,
                "widget_type": "slider"
            },
            "mo_method": {
                "data_type": "str",
                "widget_type": "drop-down",
                "options": [
                    "triangle",
                    "median",
                    "ave_tri_med"
                ]
            },
            "mo_adjust": {
                "data_type": "float",
                "increment": 0.05,
                "max": 1.0,
                "min": 0.0,
                "widget_type": "slider"
            },
            "mo_cutoff_size": {
                "data_type": "int",
                "increment": 10,
                "max": 250,
                "min": 10,
                "widget_type": "slider"
            },
            "min_thickness": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 1,
                "max": 10,
                "increment": 1
            },
            "thin": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 1,
                "max": 200,
                "increment": 1
            },
            "dot_scale": {
                "data_type": "float",
                "increment": 0.05,
                "max": 10,
                "min": 0,
                "widget_type": "slider"
            },
            "dot_cut": {
                "data_type": "float",
                "increment": 0.001,
                "max": 0.5,
                "min": 0,
                "widget_type": "slider"
            },
            "small_obj_w": {
                "data_type": "int",
                "increment": 1,
                "max": 50,
                "min": 1,
                "widget_type": "slider"
            }
        }
    },
    "fixed_infer_perox": {
        "name": "infer peroxisome (fixed parameters)",
        "python::module": "infer_subc_2d.organelles.peroxisome",
        "python::function": "fixed_infer_perox",
        "parameters": null
    },
    "infer_perox": {
        "name": "infer peroxisome",
        "python::module": "infer_subc_2d.organelles.peroxisome",
        "python::function": "infer_perox",
        "parameters": {
            "gauss_sig": {
                "data_type": "float",
                "increment": 0.25,
                "max": 15.0,
                "min": 1.25,
                "widget_type": "slider"
            },
            "dot_scale": {
                "data_type": "float",
                "increment": 0.05,
                "max": 10,
                "min": 0,
                "widget_type": "slider"
            },
            "dot_cut": {
                "data_type": "float",
                "increment": 0.005,
                "max": 0.5,
                "min": 0,
                "widget_type": "slider"
            },
            "small_obj_w": {
                "data_type": "int",
                "increment": 1,
                "max": 50,
                "min": 1,
                "widget_type": "slider"
            }
        }
    },
    "fixed_infer_er": {
        "name": "infer ER  (fixed parameters)",
        "python::module": "infer_subc_2d.organelles.er",
        "python::function": "fixed_infer_ER",
        "parameters": null
    },
    "infer_er": {
        "name": "Infer Endoplasmic Reticulum",
        "python::module": "infer_subc_2d.organelles.er",
        "python::function": "infer_ER",
        "parameters": {
            "filament_scale": {
                "data_type": "float",
                "increment": 0.05,
                "max": 10,
                "min": 0,
                "widget_type": "slider"
            },
            "filament_cut": {
                "data_type": "float",
                "increment": 0.001,
                "max": 0.5,
                "min": 0,
                "widget_type": "slider"
            },
            "small_obj_w": {
                "data_type": "int",
                "increment": 1,
                "max": 50,
                "min": 1,
                "widget_type": "slider"
            }
        }
    },
    "filament_filter": {
        "name": "filament filter thresholding",
        "python::module": "infer_subc_2d.core.img",
        "python::function": "filament_filter",
        "parameters": {
            "filament_scale": {
                "data_type": "float",
                "increment": 0.05,
                "max": 10,
                "min": 0,
                "widget_type": "slider"
            },
            "filament_cut": {
                "data_type": "float",
                "increment": 0.001,
                "max": 0.5,
                "min": 0,
                "widget_type": "slider"
            }
        }
    },
    "fixed_infer_LD": {
        "name": "infer lipid bodies (fixed parameters)",
        "python::module": "infer_subc_2d.organelles.lipid",
        "python::function": "fixed_infer_LD",
        "parameters": null
    },
    "infer_LD": {
        "name": "infer lipid",
        "python::module": "infer_subc_2d.organelles.lipid",
        "python::function": "infer_LD",
        "parameters": {
            "median_sz": {
                "widget_type": "slider",
                "data_type": "int",
                "min": 3,
                "max": 15,
                "increment": 1
            },
            "gauss_sig": {
                "data_type": "float",
                "increment": 0.25,
                "max": 15.0,
                "min": 1.25,
                "widget_type": "slider"
            },
            "method": {
                "data_type": "str",
                "widget_type": "drop-down",
                "options": [
                    "otsu",
                    "li",
                    "triangle",
                    "median",
                    "ave_tri_med"
                ]
            },
            "thresh_factor": {
                "data_type": "float",
                "increment": 0.05,
                "max": 1.2,
                "min": 0.6,
                "widget_type": "slider"
            },
            "thresh_min": {
                "data_type": "float",
                "increment": 0.05,
                "max": 0.9,
                "min": 0.0,
                "widget_type": "slider"
            },
            "thresh_max": {
                "data_type": "float",
                "increment": 0.05,
                "max": 1.0,
                "min": 0.1,
                "widget_type": "slider"
            },
            "max_hole_w": {
                "data_type": "int",
                "increment": 1,
                "max": 40,
                "min": 4,
                "widget_type": "slider"
            },
            "small_obj_w": {
                "data_type": "int",
                "increment": 1,
                "max": 50,
                "min": 1,
                "widget_type": "slider"
            }
        }
    },
    "apply_threshold": {
        "name": "Apply Threshold",
        "python::module": "infer_subc_2d.core.img",
        "python::function": "apply_threshold",
        "parameters": {
            "method": {
                "data_type": "str",
                "widget_type": "drop-down",
                "options": [
                    "otsu",
                    "li",
                    "triangle",
                    "median",
                    "ave_tri_med"
                ]
            },
            "thresh_factor": {
                "data_type": "float",
                "increment": 0.05,
                "max": 1.2,
                "min": 0.6,
                "widget_type": "slider"
            },
            "thresh_min": {
                "data_type": "float",
                "increment": 0.05,
                "max": 0.9,
                "min": 0.0,
                "widget_type": "slider"
            },
            "thresh_max": {
                "data_type": "float",
                "increment": 0.05,
                "max": 1.0,
                "min": 0.1,
                "widget_type": "slider"
            }
        }
    },
    "spot_filter_3": {
        "name": "spot filter thresholding (3 scales)",
        "python::module": "infer_subc_2d.core.img",
        "python::function": "spot_filter_3",
        "parameters": {
            "dot_scale_1": {
                "data_type": "float",
                "increment": 0.05,
                "max": 10,
                "min": 0,
                "widget_type": "slider"
            },
            "dot_cut_1": {
                "data_type": "float",
                "increment": 0.001,
                "max": 0.5,
                "min": 0,
                "widget_type": "slider"
            },
            "dot_scale_2": {
                "data_type": "float",
                "increment": 0.05,
                "max": 10,
                "min": 0,
                "widget_type": "slider"
            },
            "dot_cut_2": {
                "data_type": "float",
                "increment": 0.001,
                "max": 0.5,
                "min": 0,
                "widget_type": "slider"
            },
            "dot_scale_3": {
                "data_type": "float",
                "increment": 0.05,
                "max": 10,
                "min": 0,
                "widget_type": "slider"
            },
            "dot_cut_3": {
                "data_type": "float",
                "increment": 0.001,
                "max": 0.5,
                "min": 0,
                "widget_type": "slider"
            }
        }
    },
    "log_rescale_wrapper": {
        "name": "log and rescale",
        "python::module": "infer_subc_2d.core.img",
        "python::function": "log_rescale_wrapper",
        "paramters": null
    }
}